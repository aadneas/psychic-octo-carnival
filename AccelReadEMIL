/**
 * Copyright (c) 2015 - 2019, Nordic Semiconductor ASA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 *
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/** @file
 * @defgroup tw_sensor_example main.c
 * @{
 * @ingroup nrf_twi_example
 * @brief TWI Sensor Example main file.
 *
 * This file contains the source code for a sample application using TWI.
 *
 */

#include <stdio.h>
#include "boards.h"
#include "app_util_platform.h"
#include "app_error.h"
#include "nrf_drv_twi.h"
#include "nrf_delay.h"


#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"

#include "math.h"
#include "app_timer.h"


/* TWI instance ID. */
#if TWI0_ENABLED
#define TWI_INSTANCE_ID     0
#elif TWI1_ENABLED
#define TWI_INSTANCE_ID     1
#endif


/* TWI instance. */
static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE(TWI_INSTANCE_ID);

//Buffer
static uint8_t sample_data[6];


//TWI initializer
void twi_init (void)
{
    ret_code_t err_code;

    const nrf_drv_twi_config_t twi_config = {
       .scl                = ARDUINO_SCL_PIN,
       .sda                = ARDUINO_SDA_PIN,
       .frequency          = NRF_DRV_TWI_FREQ_100K,
       .interrupt_priority = APP_IRQ_PRIORITY_HIGH,
       .clear_bus_init     = false
    };
    
		
    err_code = nrf_drv_twi_init(&m_twi, &twi_config, NULL, NULL);
    APP_ERROR_CHECK(err_code);

    nrf_drv_twi_enable(&m_twi);
}



int main(void){
		//LOG initializer
		NRF_LOG_INIT(NULL);
	  NRF_LOG_DEFAULT_BACKENDS_INIT();

    twi_init();
 
		//Accel X high register
		uint8_t StartReg = 0x3B;
	
		//Gyro X high register
		uint8_t StartReg2 = 0x43;
	
		//Power management register
		uint8_t PowerMgt = 0x6B;
		uint8_t PowerReg = 0;
	
		uint8_t wakeup[2];
	  wakeup[0] = PowerMgt;
	  wakeup[1] = PowerReg;
		
		//Wakeup MPU6050
		nrf_drv_twi_tx(&m_twi, 0x68, wakeup, 2, false);
		

		while(true){
				nrf_delay_ms(500);
				
				//Start at Accel_X_high
        nrf_drv_twi_tx(&m_twi, 0x68, &StartReg, 1, false);
			
				nrf_drv_twi_rx(&m_twi, 0x68, sample_data, 6);
				
				//Accel values
				int16_t x_val = ((sample_data[0]<<8)|sample_data[1]);
				int16_t y_val = ((sample_data[2]<<8)|sample_data[3]);
				int16_t z_val = ((sample_data[4]<<8)|sample_data[5]);

				//Calculating	angle
				int angleAccelX = atan(y_val / sqrt(pow(x_val, 2) + pow(z_val, 2))) * 180 / acos(-1);
			  int angleAccelY = atan(-1 * x_val / sqrt(pow(y_val, 2) + pow(z_val, 2))) * 180 / acos(-1);
			
				
			
//				//Gyro timing
//				float currentTime;
//				float pastTime = currentTime;
//				currentTime = millis();
//				float passedTime = (currentTime - pastTime) / 1000;
				
				//Start at Gyro_X_high
        nrf_drv_twi_tx(&m_twi, 0x68, &StartReg2, 1, false);
			
				nrf_drv_twi_rx(&m_twi, 0x68, sample_data, 6);
			
				//Gyro values
				int16_t Gyx_val = ((sample_data[0]<<8)|sample_data[1]);
				int16_t Gyy_val = ((sample_data[2]<<8)|sample_data[3]);
				int16_t Gyz_val = ((sample_data[4]<<8)|sample_data[5]);
//				
//				int angleGyroX = angleGyroX + Gyx_val * passedTime;
//				int angleGyroY = angleGyroY + Gyy_val * passedTime;
				
//				NRF_LOG_INFO("<<<ACCEL values        |||       GYRO values>>>");
			  NRF_LOG_INFO(" X:%i, Y:%i, Z:%i  |||  X:%i, Y:%i, Z:%i", x_val, y_val, z_val, Gyx_val, Gyy_val, Gyz_val);
				NRF_LOG_INFO("Acc angle X:%i, Y:%i", angleAccelX, angleAccelY);
				NRF_LOG_INFO("_____")
				NRF_LOG_FLUSH();
		  }

}

/** @} */
